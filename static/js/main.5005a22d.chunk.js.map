{"version":3,"sources":["Components/Button.js","Components/Footer.js","Components/Color-Dot.js","Components/Form.js","Components/Mapbox.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","border","concat","color","hover","bind","assertThisInitialized","isHover","setState","hoverColor","_this2","react_default","a","createElement","className","onMouseEnter","onMouseLeave","style","onClick","text","Component","Footer","href","ColorDot","backgroundColor","Form","location","panel","alpha","panelFocus","React","createRef","toggleLocation","colorChooser","submitForm","navigator","geolocation","getCurrentPosition","position","latitude","Math","round","coords","longitude","key","replace","geoFireRef","set","firebaseRef","child","update","closeForm","_this3","lib","ref","enableAlpha","onBlur","onChange","isActive","Color_Dot_ColorDot","es","action","popup","popupPlacement","destroyPopupOnHide","popupAlign","points","offset","Button_Button","Mapbox","mapboxgl","accessToken","map","Map","container","mapContainer","remove","top","bottom","width","el","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","formActive","disableGeolocation","geoFire","toggleForm","database","GeoFire","hasGeolocation","query","center","radius","on","once","console","log","val","value","Mapbox_Mapbox","Footer_Footer","Form_Form","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5005a22d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../Styles/Button.css';\n\nexport default class Button extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      border: `2px solid ${this.props.color}`,\n      color: this.props.color\n    }\n    this.hover = this.hover.bind(this);\n  }\n\n  hover(isHover){\n    if(isHover){\n      this.setState({\n        border: `2px solid ${this.props.hoverColor}`,\n        color: this.props.hoverColor\n      });\n      return\n    }\n    this.setState({\n      border: `2px solid ${this.props.color}`,\n      color: this.props.color\n    });\n  }\n\n  render(){\n\n    return(\n      <div\n      className={`Button ${this.props.className}`}\n      onMouseEnter={()=>this.hover(true)}\n      onMouseLeave={()=>this.hover(false)}\n      style={this.state}\n      onClick={this.props.onClick}>\n        {this.props.text}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport '../Styles/Footer.css';\n\nexport default class Footer extends Component {\n  render(){\n    return(\n      <footer>\n        <a href=\"##\">Source</a>\n      </footer>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport '../Styles/Color-Dot.css'\n\nexport default class ColorDot extends Component {\n  render(){\n    const style = {\n      backgroundColor: this.props.color\n    }\n    return (\n      <div className='Color-Dot' style={style}>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport '../Styles/Form.css';\nimport Button from './Button';\nimport ColorDot from './Color-Dot';\nimport { Panel } from 'rc-color-picker';\n// trigger is a package used in rc-color-picker\nimport Trigger from 'rc-trigger';\nimport 'rc-color-picker/assets/index.css';\n\n\nexport default class Form extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      location: false,\n      panel: false,\n      color: {color: \"#cf0bff\", alpha: 100},\n    }\n    this.panelFocus = React.createRef();\n    this.toggleLocation = this.toggleLocation.bind(this);\n    this.colorChooser = this.colorChooser.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  toggleLocation(){\n    this.setState({ location: !this.state.location });\n  }\n\n  colorChooser(color){\n    this.setState({color: color});\n  }\n\n  submitForm(){\n    navigator.geolocation.getCurrentPosition((position)=>{\n      // keys might be the same on purpose this is to replace a point that is otherwise going to be directly on top of the other\n      const latitude = Math.round(position.coords.latitude * 100000) / 100000;\n      const longitude = Math.round(position.coords.longitude * 100000) / 100000;\n      const key = `${latitude},${longitude}`.replace(/\\./g, ',');\n      this.props.geoFireRef.set(key, [latitude, longitude]);\n\n      // after you set the point we have to add color so we use firebaseRef\n      this.props.firebaseRef.child(key).update({color: this.state.color.color});\n    });\n    this.props.closeForm(false);\n  }\n\n  render(){\n    const panel = (<Panel\n      ref={this.panelFocus}\n      className={this.state.panel ? 'open' : 'close'}\n      enableAlpha={false}\n      color={this.state.color.color}\n      onBlur={()=>{this.setState({panel: false})}}\n      onChange={this.colorChooser}/>);\n    return (\n      <div className={`Form-wrapper ${this.props.isActive ? 'active': ''}`}>\n        <div className='Form'>\n          <div className='title'>New Point</div>\n          <div className='input-wrapper'>\n            <div\n              className='input'\n              onClick={this.toggleLocation}>\n              <ColorDot color={this.state.location ? 'rgb(0, 181, 0)' : 'rgb(198,0,0)'}/> Allow Location\n            </div>\n            <Trigger\n              action={['click']}\n              popup={panel}\n              popupPlacement=\"topLeft\"\n              destroyPopupOnHide\n              popupAlign={{\n                points: ['tl', 'bl'],\n                offset: [0, 3]\n              }}>\n              <div className='input'>\n                  <ColorDot color={this.state.color.color}/> Color Chooser\n                </div>\n              </Trigger>\n          </div>\n          <div className='button-wrapper'>\n            <Button\n              onClick={this.submitForm}\n              text='Submit'\n              color='rgb(0,127,0)'\n              hoverColor='rgb(0,80,0)'/>\n            <Button\n              onClick={this.props.closeForm}\n              text='Cancel'\n              color='rgb(198,0,0)'\n              hoverColor='rgb(98,0,0)'/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\n\n// initial code from https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\nexport default class Mapbox extends Component {\n  componentDidMount() {\n    mapboxgl.accessToken = 'pk.eyJ1Ijoid2l0aGNoZWVzZXBscyIsImEiOiJjam9mNmlubTEwMTYwM3BueGNvbW92cXR5In0.aC-cPbUGitfW_4lrx92KSA';\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/withcheesepls/cjog1f02r1ds52so0vdjqibye'\n    });\n  }\n\n  componentWillUnmount() {\n    this.map.remove();\n  }\n\n  render() {\n    const style = {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      width: '100%'\n    };\n\n    return <div style={style} ref={el => this.mapContainer = el} />;\n  }\n}\n","import firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyCWMqf2pmYbLYpYu1eohHRs7GueK5jsKcQ\",\n    authDomain: \"color-map1.firebaseapp.com\",\n    databaseURL: \"https://color-map1.firebaseio.com\",\n    projectId: \"color-map1\",\n    storageBucket: \"color-map1.appspot.com\",\n    messagingSenderId: \"129169085202\"\n  };\n\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, { Component } from 'react';\nimport Button from './Components/Button';\nimport Footer from './Components/Footer';\nimport Form from './Components/Form';\nimport Mapbox from './Components/Mapbox';\nimport './Styles/App.css';\nimport firebase from './firebase.js';\nimport GeoFire from 'geofire';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      formActive: false,\n      disableGeolocation: false,\n      firebaseRef: null,\n      geoFire: null\n    }\n    this.toggleForm = this.toggleForm.bind(this);\n  }\n\n  componentDidMount(){\n    const firebaseRef = firebase.database().ref('points');\n    const geoFireRef = new GeoFire(firebaseRef);\n\n    this.setState({\n      firebaseRef: firebaseRef,\n      geoFireRef: geoFireRef,\n      hasGeolocation: (\"geolocation\" in navigator),\n    });\n\n    const query = geoFireRef.query({\n      center:[40.8592951,-73.865675],\n      radius: 10\n    })\n\n    query.on(\"key_entered\", (key, location)=>{\n      // console.log(key, location);\n      firebaseRef.child(key).once('value', (a)=>{\n        console.log(a.val());\n      });\n    });\n\n  }\n\n  toggleForm(value){\n    let formActive = value ? value : !this.state.formActive;\n    this.setState({formActive: value})\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <Mapbox/>\n        <Button\n          className={'form-btn'}\n          onClick={this.toggleForm}\n          color={'#7b7b7b'}\n          hoverColor={'rgb(93, 93, 93)'}\n          text={'New Point'}/>\n        <Footer/>\n        <Form\n          geoFireRef={this.state.geoFireRef}\n          firebaseRef={this.state.firebaseRef}\n          closeForm={()=>{this.toggleForm(false)}}\n          isActive={this.state.formActive}/>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}